name: Generate Dependency Diagrams

on:
  push:
    paths:
      - 'backend/**'
      - 'packages/**'
    branches-ignore:
      - 'master'
      - 'hotfix-*'

jobs:
  generate-diagrams:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: true

      - name: Enable Corepack # Enable yarn version 4
        run: corepack enable

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@b1de5da23ed0a6d14e0aeee8ed52fdd87af2363c # v2.0.2

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '22'

      - name: Install dependencies
        run: yarn install

      - name: Generate dependency diagrams
        run: yarn generate-all-dependency-diagrams

      - name: Commit updated diagrams via GitHub API
        run: |
          pwd
          echo "Checking for changes in 'diagram/' directory..."
          CHANGED=$(git status --porcelain diagram/)
          echo "Git status output:"
          echo "$CHANGED"

          if [ -z "$CHANGED" ]; then
            echo "No changes detected. Exiting."
            exit 0
          fi

          echo "Changes detected. Starting to commit changed diagrams..."
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Target branch: $BRANCH_NAME"

          FILES_CHANGED=$(echo "$CHANGED" | awk '{print $2}')
          echo "Files to commit:"
          echo "$FILES_CHANGED"

          for file in $FILES_CHANGED; do
            echo "Preparing to commit: $file"
            if [ ! -f "$file" ]; then
              echo "Skipped: $file does not exist."
              continue
            fi

            CONTENT=$(base64 -w 0 "$file")
            FILENAME=$(basename "$file")

            echo "Checking if file already exists in the repository..."
            SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=$BRANCH_NAME \
              | jq -r .sha)

            if [ "$SHA" == "null" ]; then
              echo "No existing file found. Will create new."
              SHA=""
            else
              echo "Updating existing file with SHA: $SHA"
            fi

            echo "Uploading $file via GitHub API..."
            RESPONSE=$(curl -s -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d "{\"message\":\"Auto-update diagram: $FILENAME\", \"content\":\"$CONTENT\", \"branch\":\"$BRANCH_NAME\", \"sha\":\"$SHA\"}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file)

            echo "API response for $file:"
            echo "$RESPONSE"
            echo ""
          done

